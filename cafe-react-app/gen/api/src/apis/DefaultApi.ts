/* tslint:disable */
/* eslint-disable */
/**
 * Musically Cafe
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Caffee,
    CaffeeFromJSON,
    CaffeeToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Music,
    MusicFromJSON,
    MusicToJSON,
} from '../models';

export interface CaffeeRequest {
    name?: string;
}

export interface MusicRequest {
    name?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns list of caffees
     */
    async caffeeRaw(requestParameters: CaffeeRequest): Promise<runtime.ApiResponse<Array<Caffee>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/caffee`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CaffeeFromJSON));
    }

    /**
     * Returns list of caffees
     */
    async caffee(requestParameters: CaffeeRequest): Promise<Array<Caffee>> {
        const response = await this.caffeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of music to the caller
     */
    async musicRaw(requestParameters: MusicRequest): Promise<runtime.ApiResponse<Array<Music>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/music`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MusicFromJSON));
    }

    /**
     * Returns list of music to the caller
     */
    async music(requestParameters: MusicRequest): Promise<Array<Music>> {
        const response = await this.musicRaw(requestParameters);
        return await response.value();
    }

}
